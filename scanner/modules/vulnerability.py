import paramiko
import json
import os
import re

class VulnerabilityDetector:
    def __init__(self, host, ports):
        self.host = host
        self.ports = ports
        self.vulns = []
        
    def check_all(self):
        self._check_ssh()
        self._check_http()
        return self.vulns
    
    def _check_ssh(self):
        if 22 not in self.ports:
            return
        with open(os.path.join('scanner','data','weak_passwords.txt')) as f:
            passwords = [line.strip() for line in f]
        
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        for pwd in passwords:
            try:
                ssh.connect(self.host, port=22, username='root', 
                           password=pwd, timeout=3)
                self.vulns.append(f"SSH弱密码: root/{pwd}")
                break
            except: pass
    
    def _check_http(self):
        if 80 not in self.ports:
            return
        try:
            with socket.create_connection((self.host,80), timeout=2) as s:
                s.send(b"GET / HTTP/1.1\r\n\r\n")
                banner = s.recv(1024).decode()
                self._match_cve(banner)
        except: pass
    
    def _match_cve(self, banner):
        with open(os.path.join('scanner','data','cve_db.json')) as f:
            cve_db = json.load(f)
        
        for sw in cve_db:
            if re.search(sw, banner, re.I):
                ver = re.search(cve_db[sw]['pattern'], banner)
                if ver and ver.group(1) in cve_db[sw]['vulnerable']:
                    self.vulns.extend(cve_db[sw]['cves'])